{"ast":null,"code":"var _jsxFileName = \"/Users/amirah/Desktop/T1000/homeworks_laps/use-effect-hook-lab/src/UseEffect.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// import { useEffect, useState } from \"react\";\n// function UseEffect() {\n//   const [windowSize, setWindowSize] = useState({width:undefined});\n//   //   useEffect(() => {\n//   //     document.title = \"you clicked {count} times\";\n//   //   });\n//   return (\n//     <div>\n//       <p>you clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>click me</button>\n//     </div>\n//   );\n// }\n// export default UseEffect;\nimport { useState, useEffect } from \"react\"; // Define general type for useWindowSize hook, which includes width and height\n// Usage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const size = useWindowSize();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [size.width, \"px / \", size.height, \"px\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n} // Hook\n\n\n_s(App, \"/dTDjnwlNGsRzu12Dr5t7HJe8sA=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = App;\n\nfunction useWindowSize() {\n  _s2();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s2(useWindowSize, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default UseEffect;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/amirah/Desktop/T1000/homeworks_laps/use-effect-hook-lab/src/UseEffect.js"],"names":["useState","useEffect","App","size","useWindowSize","width","height","handleResize","setWindowSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","windowSize","UseEffect"],"mappings":";;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;AAEA;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,IAAI,GAAGC,aAAa,EAA1B;AACA,sBACE;AAAA,eACGD,IAAI,CAACE,KADR,WACoBF,IAAI,CAACG,MADzB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CACD;;;GARSJ,G;UACME,a;;;KADNF,G;;AAST,SAASE,aAAT,GAAyB;AAAA;;AACvB;AACA;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,aAASM,YAAT,GAAwB;AACtB;AACAC,MAAAA,aAAa,CAAC;AACZH,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADF;AAEZJ,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAFH,OAAD,CAAb;AAID,KARa,CASd;;;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCL,YAAlC,EAVc,CAWd;;AACAA,IAAAA,YAAY,GAZE,CAad;;AACA,WAAO,MAAME,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCN,YAArC,CAAb;AACD,GAfQ,EAeN,EAfM,CAAT,CAJuB,CAmBf;;AACR,SAAOO,UAAP;AACD;;IArBQV,a;;AAsBT,eAAeW,SAAf","sourcesContent":["// import { useEffect, useState } from \"react\";\n\n// function UseEffect() {\n//   const [windowSize, setWindowSize] = useState({width:undefined});\n\n//   //   useEffect(() => {\n//   //     document.title = \"you clicked {count} times\";\n//   //   });\n//   return (\n//     <div>\n//       <p>you clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>click me</button>\n//     </div>\n//   );\n// }\n\n// export default UseEffect;\n\nimport { useState, useEffect } from \"react\";\n// Define general type for useWindowSize hook, which includes width and height\n\n// Usage\nfunction App() {\n  const size = useWindowSize();\n  return (\n    <div>\n      {size.width}px / {size.height}px\n    </div>\n  );\n}\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\nexport default UseEffect;\n"]},"metadata":{},"sourceType":"module"}